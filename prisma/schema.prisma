// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts Post[]
  comments Comment[]
  // Optional for WebAuthn support
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refresh_token_expires_in Int?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  slug String @unique
  image String? @db.String
  title String
  color String
  Posts Post[]
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  slug String @unique
  image String? @db.String
  title String
  desc String
  content String
  views Int @default(0)
  categorySlug String
  userID String @db.ObjectId
  comments Comment[]
  createdAt DateTime @default(now())

  cat Category @relation(fields: [categorySlug], references: [slug])
  user User @relation(fields: [userID], references: [id])
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  desc String
  postSlug String
  userID String @db.ObjectId
  createdAt DateTime @default(now())

  post Post @relation(fields: [postSlug], references: [slug])
  user User @relation(fields: [userID], references: [id])
}